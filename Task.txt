Questions:

 1. Check if the given string is a palindrome or not irrespective of case Eg: Naan – True, naan – True, roti – False 

2. The user enters a string and a substring. You have to print the number of times that the substring occurs in the given string. String traversal will take place from left to right, not from right to left. NOTE: String letters are case-sensitive. The first line of input contains the original string. The next line contains the substring. Example: Input: ABCDCDC pattern: CD output: 2

 3. Create a basic rock paper scissors game. Take 2 user inputs from 2 players. You can use R, P and S are possible user inputs. Play the game for 10 rounds and declare the winner. Rules of the game Rock vs Scissors - Rock wins Rock vs Paper - Paper wins Paper vs Scissors - Scissor wins Eg: Game 1: Player1 = R, Player2 = S, Output: Player1 wins Player1 = P, Player2 = P, Output: Draw Final Winner: Player with maximum wins


 4. The below API print the price of Bitcoin in USD and GBP https://api.coindesk.com/v1/bpi/currentprice.json • Collect data from this API for 1 day at 5 minutes interval. I.e you will have at least 288 unique data points. Consecutive data points should not have same value. • Find the highest and lowest price of bitcoin from the collected data, without using minimum or maximum functions 



Answers:

1.Check if the given string is a palindrome or not irrespective of case



def palindrome_check():
    word=input('Enter the word\t').lower()
    if(word==word[::-1]):
        print("True")
    else:print("False")
palindrome_check()



2.The user enters a string and a substring. You have to print the number of times that the
substring occurs in the given string. String traversal will take place from left to right, not from
right to left. 



def substring_number():
    word=input("Enter the word\t")
    substring=input("Enter the substring\t")
    print('Number of ',substring," in ",word,": ",word.count(substring))

substring_number()



3.Create a basic rock paper scissors game.



def rock_paper_scissor():
    player1=0
    player2=0
    list1=['p','s','r']
    for i in range(0,10):
        
        print("P - Paper,R - Rock,S - Scissors")
        choice1=input("Player 1: Enter the Choice \t")
        choice2=input("Player 2:Enter the  Choice \t")
        choice1=choice1.lower()
        choice2=choice2.lower()
    
        if choice1 not in list1:
            print("wrong choice")
        if choice2 not in list1:
            print("wrong choice")
        
           
        if(choice1=='r' and choice2=='s'):
            player1+=1
        elif(choice1=='r' and choice2=='p'):
            player2+=1
        elif(choice1=='s' and choice2=='p'):
            player1+=1
        elif(choice1=='s' and choice2=='r'):
            player2+=1
        elif(choice1=='p' and choice2=='r'):
            player1+=1
        elif(choice1=='p' and choice2=='s'):
            player2+=1
    print("\nPoints\nPlayer 1 : %s points\nPlayer 2 : %s points"%(str(player1),str(player2)))
    if(player1==player2):
        print("Tie")
    elif(player1>player2):
        print("Player one wins")
    else:
        print('Player two wins')
    
rock_paper_scissor()




4.. The below API print the price of Bitcoin in USD and GBP
https://api.coindesk.com/v1/bpi/currentprice.json




import requests
import schedule
import time




USD = []
GBP = []
EUR = []
rates = {'USD': USD, 'GBP': GBP, 'EUR': EUR}


def job():
    
    response = requests.get("https://api.coindesk.com/v1/bpi/currentprice.json")
    USD.append(response.json()['bpi']['USD']['rate'])
    GBP.append(response.json()['bpi']['GBP']['rate'])
    EUR.append(response.json()['bpi']['EUR']['rate'])
    

    for rate in rates:
        if len(rates[rate]) >277 :
            
            for i in range(0, len(rates[rate]) - 1):
                for j in range(i + 1, len(rates[rate])):
                    if rates[rate][i] > rates[rate][j]:
                        rates[rate][i], rates[rate][j] = rates[rate][j], rates[rate][i]
                    print("Price in", rate)
                    print("Lowest Price : ", rates[rate][0], "\tHighest Price : ", rates[rate][-1], '\n') #print price in every five minutes
    if len(USD) > 288:
        USD.pop(0)
        EUR.pop(0)
        GBP.pop(0)



schedule.every(1).seconds.do(job)
while True:
   schedule.run_pending()
   time.sleep(300)
